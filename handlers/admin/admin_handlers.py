import random
import string
from aiogram import types, Router, F, Bot
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from openpyxl import Workbook
from config.config import ADMIN_IDS
from db.database import (add_game, stop_game, get_all_results, get_best_results, get_game,
                         get_game_status, get_participants, get_current_active_game, get_finished_games,
                         get_all_user_ids, get_user_result_for_game, start_next_game)
import io
from aiogram.types import BufferedInputFile

admin_router = Router()

class CreateGame(StatesGroup):
    waiting_for_photo = State()
    waiting_for_prompt = State()

class TestAnalyse(StatesGroup):
    waiting_for_text1 = State()
    waiting_for_text2 = State()

@admin_router.message(Command("help"), F.from_user.id.in_(ADMIN_IDS))
async def admin_help_command(message: types.Message):
    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        "/makegame - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/startgame - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—É—é –∏–≥—Ä—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏\n"
        "/continuegame - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏\n"
        "/stopgame - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É\n"
        "/excel - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "/senduser <id> <message> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
    )

@admin_router.message(Command("makegame"), F.from_user.id.in_(ADMIN_IDS))
async def make_game_command(message: types.Message, state: FSMContext):
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")
    await state.set_state(CreateGame.waiting_for_photo)

@admin_router.message(CreateGame.waiting_for_photo, F.photo, F.from_user.id.in_(ADMIN_IDS))
async def photo_sent(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç.")
    await state.set_state(CreateGame.waiting_for_prompt)

@admin_router.message(CreateGame.waiting_for_prompt, F.from_user.id.in_(ADMIN_IDS))
async def prompt_sent(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_id = data.get('photo_id')
    prompt = message.text
    
    game_id = await add_game(prompt, photo_id)
    await state.clear()

    await message.answer(f"–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å. ID –∏–≥—Ä—ã: `{game_id}`. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startgame, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")


async def start_game_logic(message: types.Message, bot: Bot):
    game_id = await start_next_game()
    if not game_id:
        await message.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∏–≥—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
        return

    game_data = await get_game(game_id)
    if not game_data:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã.")
        return
    
    _, photo_id = game_data
    
    all_user_ids = await get_all_user_ids()
    sent_count = 0
    for user_id in all_user_ids:
        try:
            # –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ —Ä–∞—É–Ω–¥–∞
            await bot.send_message(user_id, "–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
            sent_count += 1
        except TelegramForbiddenError:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–π –±–æ—Ç.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.answer(f"–ò–≥—Ä–∞ `{game_id}` —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ {sent_count} –∏–∑ {len(all_user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@admin_router.message(Command("startgame"), F.from_user.id.in_(ADMIN_IDS))
async def start_game_command(message: types.Message, bot: Bot):
    await start_game_logic(message, bot)

async def stop_game_logic(message: types.Message, bot: Bot, is_continue: bool = False):
    game_id = await get_current_active_game()
    if not game_id:
        if not is_continue:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        return

    await stop_game(game_id)
    
    participants = await get_participants(game_id)
    if not participants:
        if not is_continue:
            await message.answer(f"–ò–≥—Ä–∞ {game_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –≤ –Ω–µ–π –Ω–µ –±—ã–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    best_results = await get_best_results(game_id)
    game_data = await get_game(game_id)

    if not game_data:
        if not is_continue:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã.")
        return
    
    true_prompt, _ = game_data
    
    winner_info_for_admin = "üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω."
    if best_results:
        winner = best_results[0]
        winner_username = winner['username'] if winner['username'] else f"user_id: {winner['user_id']}"
        winner_score = winner['score']
        winner_prompt = winner['prompt_text']
        winner_phone = winner['phone_number'] if 'phone_number' in winner.keys() else '–ù–µ —É–∫–∞–∑–∞–Ω'
        
        winner_info_for_admin = (
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner_username}\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç: {winner_score}%\n"
            f"–ü—Ä–æ–º–ø—Ç: ¬´{winner_prompt}¬ª\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {winner_phone}"
        )

    # –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    for user_id in participants:
        try:
            await bot.send_message(
                user_id,
                "–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –°–∫–æ—Ä–æ –º—ã –æ–±—ä—è–≤–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ. ‚ú®"
            )
        except TelegramForbiddenError:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n"
                f"–ò–≥—Ä–∞ <code>{game_id}</code> –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                f"{winner_info_for_admin}\n\n"
                f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –±—ã–ª: ¬´{true_prompt}¬ª",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    if not is_continue:
        await message.answer(f"–ò–≥—Ä–∞ {game_id} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

@admin_router.message(Command("stopgame"), F.from_user.id.in_(ADMIN_IDS))
async def stop_game_command(message: types.Message, bot: Bot):
    await stop_game_logic(message, bot)

@admin_router.message(Command("continuegame"), F.from_user.id.in_(ADMIN_IDS))
async def continue_game_command(message: types.Message, bot: Bot):
    await message.answer("–ó–∞–≤–µ—Ä—à–∞—é —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É...")
    await stop_game_logic(message, bot, is_continue=True)
    await message.answer("–ù–∞—á–∏–Ω–∞—é —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É...")
    await start_game_logic(message, bot)

@admin_router.message(Command("excel"), F.from_user.id.in_(ADMIN_IDS))
async def excel_export_command(message: types.Message):
    finished_games = await get_finished_games()
    if not finished_games:
        await message.answer("–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    buttons = []
    for game_id, prompt in finished_games:
        # –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–µ
        short_prompt = (prompt[:20] + '...') if len(prompt) > 20 else prompt
        buttons.append([types.InlineKeyboardButton(text=f"–ò–≥—Ä–∞: {short_prompt}", callback_data=f"select_game:{game_id}")])
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:", reply_markup=keyboard)

@admin_router.callback_query(F.data.startswith("select_game:"))
async def select_game_for_export(callback_query: types.CallbackQuery):
    game_id = callback_query.data.split(":")[1]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∏—Ç—å –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data=f"excel_best:{game_id}")],
        [types.InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data=f"excel_all:{game_id}")]
    ])
    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–≥—Ä—É–∑–∫–∏:", reply_markup=keyboard)
    await callback_query.answer()

@admin_router.callback_query(F.data.startswith("excel_"))
async def excel_export_callback(callback_query: types.CallbackQuery):
    action, game_id = callback_query.data.split(":")
    
    if action == "excel_best":
        results = await get_best_results(game_id)
        file_suffix = "best"
    else:
        results = await get_all_results(game_id)
        file_suffix = "all"

    if not results:
        await callback_query.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã.")
        await callback_query.answer()
        return

    wb = Workbook()
    ws = wb.active
    ws.title = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã {game_id}"
    ws.append(["user_id", "–Ω–∏–∫", "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç", "–æ—á–∫–∏", "–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞"])

    for row in results:
        ws.append([row['user_id'], row['username'], row['phone_number'], row['prompt_text'], row['score'], row['timestamp']])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ –≤ –ø–∞–º—è—Ç–∏
    file_stream = io.BytesIO()
    wb.save(file_stream)
    file_stream.seek(0) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

    file_name = f"results_{game_id}_{file_suffix}.xlsx"
    await callback_query.message.answer_document(
        BufferedInputFile(file_stream.read(), filename=file_name)
    )
    await callback_query.answer()

from utils.similarity import get_similarity_score

@admin_router.message(Command("senduser"), F.from_user.id.in_(ADMIN_IDS))
async def send_user_command(message: types.Message, bot: Bot):
    try:
        parts = message.text.split(maxsplit=2)
        user_id = int(parts[1])
        text_to_send = parts[2]
        
        await bot.send_message(user_id, text_to_send)
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except (IndexError, ValueError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /senduser <id> <message>")
    except TelegramForbiddenError:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–π –±–æ—Ç.")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

@admin_router.message(Command("testanalyse"), F.from_user.id.in_(ADMIN_IDS))
async def test_analyse_start(message: types.Message, state: FSMContext):
    await state.set_state(TestAnalyse.waiting_for_text1)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")

@admin_router.message(TestAnalyse.waiting_for_text1, F.from_user.id.in_(ADMIN_IDS))
async def test_analyse_text1_received(message: types.Message, state: FSMContext):
    await state.update_data(text1=message.text)
    await state.set_state(TestAnalyse.waiting_for_text2)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç.")

@admin_router.message(TestAnalyse.waiting_for_text2, F.from_user.id.in_(ADMIN_IDS))
async def test_analyse_text2_received(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text1 = data.get('text1')
    text2 = message.text

    score = await get_similarity_score(text1, text2)
    await message.answer(f"–°—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–∞–º–∏: {score}%")
    
    await state.clear()
