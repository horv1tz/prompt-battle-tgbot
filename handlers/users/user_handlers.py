from aiogram import types, Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db.database import (add_result, get_user_attempts, get_game_prompt,
                         add_participant, get_current_active_game,
                         get_game, add_or_update_user, get_user_by_id,
                         update_user_state, update_user_phone)
from utils.similarity import get_similarity_score
from middlewares.subscription import is_user_subscribed
from config.config import CHANNEL_ID
import re

user_router = Router()

MAX_ATTEMPTS = 1

class UserState(StatesGroup):
    awaiting_phone_number = State()
    in_game = State()

# =================================================================================================
# HELPERS
# =================================================================================================

async def ask_for_subscription(message: types.Message, is_new_user: bool):
    channel_link = "https://t.me/ci_jobs" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    keyboard = [
        [types.InlineKeyboardButton(text="‚ÜóÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_link)],
        [types.InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(–∞—Å—å)", callback_data="check_subscription_again")]
    ]
    markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)

    if is_new_user:
        text = (
            "–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—é, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞. "
            "–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è(–∞—Å—å)¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )
    else:
        text = (
            "–ü–æ—Ö–æ–∂–µ, —Ç—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞. "
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å —Å–Ω–æ–≤–∞ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É."
        )
    
    await message.answer(text, reply_markup=markup, disable_web_page_preview=True)

async def ask_for_phone(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", callback_data="request_contact_permission")]
    ])
    # –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ Reply-–∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ Inline
    reply_keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "–ó–¥–æ—Ä–æ–≤–æ! –¢—ã —Å –Ω–∞–º–∏ üöÄ\n\n"
        "–î–ª—è —Å–≤—è–∑–∏ –≤ —Å–ª—É—á–∞–µ –ø–æ–±–µ–¥—ã –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–¥–µ–ª–∏—Å—å –∏–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=reply_keyboard # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )


# =================================================================================================
# START AND REGISTRATION FLOW
# =================================================================================================

@user_router.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext, bot: Bot):
    await state.clear()
    user = message.from_user
    db_user = await get_user_by_id(user.id)
    is_new = not db_user

    if is_new:
        await add_or_update_user(user.id, user.username, user.first_name, user.last_name)
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ ¬´–ë–∏—Ç–≤–µ –ü—Ä–æ–º–ø—Ç–æ–≤¬ª‚ú®")

    subscribed = await is_user_subscribed(user.id, bot)
    if not subscribed:
        await ask_for_subscription(message, is_new)
        return

    if not db_user or not db_user['phone_number']:
        await state.set_state(UserState.awaiting_phone_number)
        await ask_for_phone(message)
    else:
        await show_main_menu(message)

@user_router.callback_query(F.data == 'check_subscription_again')
async def check_subscription_again_handler(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    user_id = callback_query.from_user.id
    subscribed = await is_user_subscribed(user_id, bot)
    
    if subscribed:
        await callback_query.message.delete()
        db_user = await get_user_by_id(user_id)
        if not db_user or not db_user['phone_number']:
            await state.set_state(UserState.awaiting_phone_number)
            await ask_for_phone(callback_query.message)
        else:
            await show_main_menu(callback_query.message)
    else:
        await callback_query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", show_alert=True)

@user_router.message(UserState.awaiting_phone_number, F.contact)
async def phone_number_handler(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await update_user_phone(message.from_user.id, phone_number)
    await update_user_state(message.from_user.id, 'registered')
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, –≤—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞!", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()
    await show_main_menu(message)

async def show_main_menu(message: types.Message):
    game_id = await get_current_active_game()
    text = "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞—á–Ω–µ—Ç—Å—è –Ω–æ–≤–∞—è, —è –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
    keyboard = None

    if game_id:
        text = "–ì–æ—Ç–æ–≤(–∞) —Å—ã–≥—Ä–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ", callback_data="play_now")]
        ])

    await message.answer(text, reply_markup=keyboard)

# =================================================================================================
# GAME READINESS AND START
# =================================================================================================

@user_router.callback_query(F.data == 'play_now')
async def play_now_handler(callback_query: types.CallbackQuery, state: FSMContext):
    game_id = await get_current_active_game()
    if not game_id:
        await callback_query.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –î–æ–∂–¥–∏—Å—å —Å–ª–µ–¥—É—é—â–µ–π!")
        await callback_query.answer()
        return
        
    user_id = callback_query.from_user.id
    attempts = await get_user_attempts(game_id, user_id)
    if attempts >= MAX_ATTEMPTS:
        await callback_query.message.edit_text("–¢—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª(–∞) —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ. –ñ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
        await callback_query.answer()
        return

    await callback_query.message.edit_text("–°—É–ø–µ—Ä! –í–æ—Ç –ø—Ä–∞–≤–∏–ª–∞:\n\n"
                                         "1. –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.\n"
                                         "2. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É–≥–∞–¥–∞—Ç—å, –∫–∞–∫–æ–π –ø—Ä–æ–º—Ç (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å) –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.\n"
                                         "3. –£ —Ç–µ–±—è –±—É–¥–µ—Ç 1 –ø–æ–ø—ã—Ç–∫–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç. –ß–µ–º —Ç–æ—á–Ω–µ–µ —Ç–≤–æ–π –ø—Ä–æ–º—Ç ‚Äî —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É!\n\n"
                                         "–í–Ω–∏–º–∞–Ω–∏–µ! –ß—Ç–æ–±—ã –≤—Å–µ –∏–≥—Ä–∞–ª–∏ —á–µ—Å—Ç–Ω–æ, —è –Ω–µ –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞. "
                                         "–ö–æ–≥–¥–∞ —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, —è –ø–æ–¥–≤–µ–¥—É –∏—Ç–æ–≥–∏, –ø—Ä–∏—à–ª—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –∏ —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
                                         "–£–¥–∞—á–∏ üèÜ")
    
    game_data = await get_game(game_id)
    if game_data:
        _, photo_id = game_data
        await add_participant(game_id, user_id)
        await callback_query.message.answer_photo(photo_id, caption="–í–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ñ–¥—É —Ç–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–º–ø—Ç–∞!")
        await state.set_state(UserState.in_game)
    else:
        await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        
    await callback_query.answer()


# =================================================================================================
# GAME PROCESS
# =================================================================================================

@user_router.message(UserState.in_game, F.text)
async def handle_prompt_submission(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    game_id = await get_current_active_game()

    if not game_id:
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –∏–≥—Ä–∞—Ö.")
        await state.clear()
        return

    attempts = await get_user_attempts(game_id, user_id)
    if attempts >= MAX_ATTEMPTS:
        await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ—é –ø–æ–ø—ã—Ç–∫—É –≤ —ç—Ç–æ–π –∏–≥—Ä–µ. –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
        return

    prompt_text = await get_game_prompt(game_id)
    if not prompt_text:
        await message.answer("–≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤.")
        await state.clear()
        return

    score = await get_similarity_score(message.text, prompt_text)
    await add_result(game_id, user_id, message.from_user.username, message.text, score)

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω. –ñ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
    await state.clear()

# =================================================================================================
# OTHER HANDLERS
# =================================================================================================

@user_router.message(F.text)
async def handle_other_text(message: types.Message, state: FSMContext, bot: Bot):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –ø–∏—à–µ—Ç, –Ω–µ –Ω–∞—Ö–æ–¥—è—Å—å –≤ –∏–≥—Ä–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –Ω–∞—á–∞—Ç—å
    await start_handler(message, state, bot)
