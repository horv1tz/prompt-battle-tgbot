from aiogram import types, Router, F
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db.database import (add_result, get_user_attempts, get_game_prompt, 
                         add_participant, get_user_active_game, get_current_active_game, 
                         get_game, has_user_won, get_game_status, add_or_update_user, 
                         set_user_attempts_to_max, get_user_by_id, update_user_state, update_user_phone)
from utils.similarity import get_similarity_score
from config.config import CHANNEL_ID
import re

user_router = Router()

MAX_ATTEMPTS = 1

class UserState(StatesGroup):
    awaiting_subscription_check = State()
    awaiting_phone_number = State()
    awaiting_readiness_to_play = State()
    in_game = State()

# =================================================================================================
# HELPERS
# =================================================================================================

async def send_game_image(message: types.Message, state: FSMContext):
    user_id = message.chat.id
    game_id = await get_current_active_game()
    if not game_id:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ (–ø–æ –Ω–∞–ª–∏—á–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    attempts = await get_user_attempts(game_id, user_id)
    if attempts > 0:
        await message.answer("–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ. –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
        return

    game_data = await get_game(game_id)
    if game_data:
        _, photo_id = game_data
        await add_participant(game_id, user_id)
        try:
            await message.bot.send_photo(user_id, photo_id)
            await state.set_state(UserState.in_game)
        except TelegramForbiddenError:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–π –±–æ—Ç.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# =================================================================================================
# START AND REGISTRATION FLOW
# =================================================================================================

@user_router.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext):
    await state.clear()
    user = message.from_user
    db_user = await get_user_by_id(user.id)

    if not db_user:
        await add_or_update_user(user.id, user.username, user.first_name, user.last_name)
        db_user = await get_user_by_id(user.id)

    if db_user and db_user['phone_number']:
        await update_user_state(user.id, 'registered')
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üéØ –î–∞, –Ω–∞—á–∏–Ω–∞–µ–º!", callback_data="play_now")],
            [types.InlineKeyboardButton(text="‚è∞ –ù–µ —Å–µ–π—á–∞—Å", callback_data="play_later")]
        ])
        await message.answer(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ì–æ—Ç–æ–≤(–∞) —Å—ã–≥—Ä–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
            reply_markup=keyboard,
        )
        await state.set_state(UserState.awaiting_readiness_to_play)
    else:
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            "–ó–¥–æ—Ä–æ–≤–æ! –¢—ã —Å –Ω–∞–º–∏ üöÄ\n\n"
            "–î–ª—è —Å–≤—è–∑–∏ –≤ —Å–ª—É—á–∞–µ –ø–æ–±–µ–¥—ã –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
            "–ü–æ–¥–µ–ª–∏—Å—å –∏–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá\n\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7 XXX XXX XX XX",
            reply_markup=keyboard
        )
        await state.set_state(UserState.awaiting_phone_number)

@user_router.callback_query(F.data == 'subscription_confirmed')
async def subscription_confirmed_handler(callback_query: types.CallbackQuery, state: FSMContext):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏,
    # —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ middleware.
    # –î–ª—è —á–∏—Å—Ç–æ—Ç—ã, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ /start.
    await start_handler(callback_query.message, state)
    await callback_query.answer()

@user_router.message(UserState.awaiting_phone_number, F.contact)
async def phone_number_handler_contact(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await update_user_phone(message.from_user.id, phone_number)
    await update_user_state(message.from_user.id, 'registered')
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üéØ –î–∞, –Ω–∞—á–∏–Ω–∞–µ–º!", callback_data="play_now")],
        [types.InlineKeyboardButton(text="‚è∞ –ù–µ —Å–µ–π—á–∞—Å", callback_data="play_later")]
    ])
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ, –≤—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞! –¢—ã –≥–æ—Ç–æ–≤(–∞) —Å—ã–≥—Ä–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
        reply_markup=keyboard,
    )
    await state.set_state(UserState.awaiting_readiness_to_play)

@user_router.message(UserState.awaiting_phone_number, F.text)
async def phone_number_handler_text(message: types.Message, state: FSMContext):
    phone_pattern = re.compile(r'^\+7\s?\d{3}\s?\d{3}\s?\d{2}\s?\d{2}$')
    if phone_pattern.match(message.text):
        await update_user_phone(message.from_user.id, message.text)
        await update_user_state(message.from_user.id, 'registered')
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üéØ –î–∞, –Ω–∞—á–∏–Ω–∞–µ–º!", callback_data="play_now")],
            [types.InlineKeyboardButton(text="‚è∞ –ù–µ —Å–µ–π—á–∞—Å", callback_data="play_later")]
        ])
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ, –≤—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞! –¢—ã –≥–æ—Ç–æ–≤(–∞) —Å—ã–≥—Ä–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
            reply_markup=keyboard,
        )
        await state.set_state(UserState.awaiting_readiness_to_play)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7 XXX XXX XX XX –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")

# =================================================================================================
# GAME READINESS AND START
# =================================================================================================

@user_router.callback_query(F.data == 'play_now', UserState.awaiting_readiness_to_play)
async def play_now_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–°—É–ø–µ—Ä! –í–æ—Ç –ø—Ä–∞–≤–∏–ª–∞:\n\n"
                                         "1. –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.\n"
                                         "2. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É–≥–∞–¥–∞—Ç—å, –∫–∞–∫–æ–π –ø—Ä–æ–º—Ç (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å) –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.\n"
                                         "3. –£ —Ç–µ–±—è –±—É–¥–µ—Ç 1 –ø–æ–ø—ã—Ç–∫–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç. –ß–µ–º —Ç–æ—á–Ω–µ–µ —Ç–≤–æ–π –ø—Ä–æ–º—Ç ‚Äî —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É!\n\n"
                                         "–í–Ω–∏–º–∞–Ω–∏–µ! –ß—Ç–æ–±—ã –≤—Å–µ –∏–≥—Ä–∞–ª–∏ —á–µ—Å—Ç–Ω–æ, —è –Ω–µ –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞. "
                                         "–ö–æ–≥–¥–∞ —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, —è –ø–æ–¥–≤–µ–¥—É –∏—Ç–æ–≥–∏, –ø—Ä–∏—à–ª—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç –∏ —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
                                         "–£–¥–∞—á–∏ üèÜ")
    await send_game_image(callback_query.message, state)
    await callback_query.answer()

@user_router.callback_query(F.data == 'play_later', UserState.awaiting_readiness_to_play)
async def play_later_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞) ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /start, –∏ –º—ã –Ω–∞—á–Ω—ë–º.")
    await state.clear()
    await callback_query.answer()

# =================================================================================================
# GAME PROCESS
# =================================================================================================

@user_router.message(UserState.in_game, F.text)
async def handle_prompt_submission(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    game_id = await get_user_active_game(user_id)

    if not game_id:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        await state.clear()
        return

    prompt_text = await get_game_prompt(game_id)
    if not prompt_text:
        await message.answer("–≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞.")
        await state.clear()
        return

    attempts = await get_user_attempts(game_id, user_id)
    if attempts >= MAX_ATTEMPTS:
        await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ—é –ø–æ–ø—ã—Ç–∫—É –≤ —ç—Ç–æ–π –∏–≥—Ä–µ. –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
        return

    score = await get_similarity_score(message.text, prompt_text)
    await add_result(game_id, user_id, message.from_user.username, message.text, score)

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω. –ñ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")
    await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏

# =================================================================================================
# OTHER HANDLERS
# =================================================================================================

@user_router.message(Command("help"))
async def user_help_command(message: types.Message):
    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã
@user_router.message(F.text)
async def handle_other_text(message: types.Message):
    user = await get_user_by_id(message.from_user.id)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –≤ –∏–≥—Ä–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å
    if user and user['state'] == 'registered':
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üéØ –î–∞, –Ω–∞—á–∏–Ω–∞–µ–º!", callback_data="play_now_from_text")],
            [types.InlineKeyboardButton(text="‚è∞ –ù–µ —Å–µ–π—á–∞—Å", callback_data="play_later_from_text")]
        ])
        await message.answer("–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É?", reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /start
        await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

@user_router.callback_query(F.data == 'play_now_from_text')
async def play_now_from_text_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserState.awaiting_readiness_to_play)
    await play_now_handler(callback_query, state)

@user_router.callback_query(F.data == 'play_later_from_text')
async def play_later_from_text_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserState.awaiting_readiness_to_play)
    await play_later_handler(callback_query, state)
